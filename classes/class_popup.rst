:github_url: hide

.. Generated automatically by doc/tools/make_rst.py in Godot's source tree.
.. DO NOT EDIT THIS FILE, but the Popup.xml source instead.
.. The source is found in doc/classes or modules/<name>/doc_classes.

.. _class_Popup:

Popup
=====

**Inherits:** :ref:`Window<class_Window>` **<** :ref:`Viewport<class_Viewport>` **<** :ref:`Node<class_Node>` **<** :ref:`Object<class_Object>`

**Inherited By:** :ref:`PopupMenu<class_PopupMenu>`, :ref:`PopupPanel<class_PopupPanel>`

Popup is a base window container for popup-like subwindows.

Description
-----------

Popup is a base window container for popup-like subwindows. It's a modal by default (see :ref:`close_on_parent_focus<class_Popup_property_close_on_parent_focus>`) and has helpers for custom popup behavior.

Properties
----------

+-------------------------+--------------------------------------------------------------------------+-------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | borderless                                                               | ``true`` (overrides :ref:`Window<class_Window_property_borderless>`)    |
+-------------------------+--------------------------------------------------------------------------+-------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | :ref:`close_on_parent_focus<class_Popup_property_close_on_parent_focus>` | ``true``                                                                |
+-------------------------+--------------------------------------------------------------------------+-------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | transient                                                                | ``true`` (overrides :ref:`Window<class_Window_property_transient>`)     |
+-------------------------+--------------------------------------------------------------------------+-------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | unresizable                                                              | ``true`` (overrides :ref:`Window<class_Window_property_unresizable>`)   |
+-------------------------+--------------------------------------------------------------------------+-------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | visible                                                                  | ``false`` (overrides :ref:`Window<class_Window_property_visible>`)      |
+-------------------------+--------------------------------------------------------------------------+-------------------------------------------------------------------------+
| :ref:`bool<class_bool>` | wrap_controls                                                            | ``true`` (overrides :ref:`Window<class_Window_property_wrap_controls>`) |
+-------------------------+--------------------------------------------------------------------------+-------------------------------------------------------------------------+

Signals
-------

.. _class_Popup_signal_popup_hide:

- **popup_hide** **(** **)**

Emitted when the popup is hidden.

Property Descriptions
---------------------

.. _class_Popup_property_close_on_parent_focus:

- :ref:`bool<class_bool>` **close_on_parent_focus**

+-----------+----------------------------------+
| *Default* | ``true``                         |
+-----------+----------------------------------+
| *Setter*  | set_close_on_parent_focus(value) |
+-----------+----------------------------------+
| *Getter*  | get_close_on_parent_focus()      |
+-----------+----------------------------------+

If true, the ``Popup`` will close when its parent :ref:`Window<class_Window>` is focused.

.. |virtual| replace:: :abbr:`virtual (This method should typically be overridden by the user to have any effect.)`
.. |const| replace:: :abbr:`const (This method has no side effects. It doesn't modify any of the instance's member variables.)`
.. |vararg| replace:: :abbr:`vararg (This method accepts any number of arguments after the ones described here.)`
.. |constructor| replace:: :abbr:`constructor (This method is used to construct a type.)`
.. |static| replace:: :abbr:`static (This method doesn't need an instance to be called, so it can be called directly using the class name.)`
.. |operator| replace:: :abbr:`operator (This method describes a valid operator to use with this type as left-hand operand.)`
